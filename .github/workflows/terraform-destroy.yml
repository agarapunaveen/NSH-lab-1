name: terraform destroy
on:
 workflow_dispatch:
  inputs:
   environment:
    description: 'please select the environments'
    default: dev
    required: true
    type: choice
    options:
     - dev
     - prod
  
jobs:
 terraform-cleanup:
  runs-on: ubuntu-latest
  steps:
   - name: checkout github repository
     uses: actions/checkout@v2
   - name: configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v4
     with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
      aws-region: us-east-1
   - name: set hashicorp  
     uses: hashicorp/setup-terraform@v2.0.3
     with:
      terraform-version: 5.48.0  
   - name: terraform init
     run: terraform init
   - name: check if workspace exists or not
     run: |
      workspace_new="${{ github.event.inputs.environment == 'dev' || 'dev' &&  github.event.inputs.environment == 'prod' || 'prod' }}" 
      # workspace_new="${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/dev' && 'dev' || 'dev' }}" 
      terraform workspace list | grep -w "$workspace_new" || terraform workspace new "$workspace_new"
     id: create_workspace
     
   - name: Select Terraform Workspace 
     run: | 
      workspace_new="${{ github.event.inputs.environment == 'dev' || 'dev' &&  github.event.inputs.environment == 'prod' || 'prod' }}" 
     
       # workspace_new="${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/dev' && 'dev' || 'dev' }}" 
       terraform workspace select "$workspace_new"
     id: select_workspace
     
 
   - name: terrform apply to destroy
     run: terraform destroy -auto-approve
  
 
